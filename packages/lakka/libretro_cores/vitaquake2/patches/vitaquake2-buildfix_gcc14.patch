diff --git a/client/menu.c b/client/menu.c
index 69e29c8..293a9ff 100644
--- a/client/menu.c
+++ b/client/menu.c
@@ -2050,7 +2050,7 @@ void M_Menu_Credits_f( void )
 	int		isdeveloper = 0;
 
 	creditsBuffer = NULL;
-	count = FS_LoadFile ("credits", &creditsBuffer);
+	count = FS_LoadFile ("credits", (void **)&creditsBuffer);
 	if (count != -1)
 	{
 		p = creditsBuffer;
@@ -2074,7 +2074,7 @@ void M_Menu_Credits_f( void )
 				break;
 		}
 		creditsIndex[++n] = 0;
-		credits = creditsIndex;
+		credits = (const char **)creditsIndex;
 	}
 	else
 	{
@@ -2940,7 +2940,7 @@ void StartServer_MenuInit( void )
 	s_startmap_list.generic.x	= 0;
 	s_startmap_list.generic.y	= 0;
 	s_startmap_list.generic.name	= "initial map";
-	s_startmap_list.itemnames = mapnames;
+	s_startmap_list.itemnames = (const char **)mapnames;
 
 	s_rules_box.generic.type = MTYPE_SPINCONTROL;
 	s_rules_box.generic.x	= 0;
@@ -3792,7 +3792,7 @@ static void RateCallback( void *unused )
 
 static void ModelCallback( void *unused )
 {
-	s_player_skin_box.itemnames = s_pmi[s_player_model_box.curvalue].skindisplaynames;
+	s_player_skin_box.itemnames = (const char **)s_pmi[s_player_model_box.curvalue].skindisplaynames;
 	s_player_skin_box.curvalue = 0;
 }
 
@@ -4084,7 +4084,7 @@ qboolean PlayerConfig_MenuInit( void )
 	s_player_model_box.generic.callback = ModelCallback;
 	s_player_model_box.generic.cursor_offset = -48;
 	s_player_model_box.curvalue = currentdirectoryindex;
-	s_player_model_box.itemnames = s_pmnames;
+	s_player_model_box.itemnames = (const char **)s_pmnames;
 
 	s_player_skin_title.generic.type = MTYPE_SEPARATOR;
 	s_player_skin_title.generic.name = "skin";
@@ -4098,7 +4098,7 @@ qboolean PlayerConfig_MenuInit( void )
 	s_player_skin_box.generic.callback = 0;
 	s_player_skin_box.generic.cursor_offset = -48;
 	s_player_skin_box.curvalue = currentskinindex;
-	s_player_skin_box.itemnames = s_pmi[currentdirectoryindex].skindisplaynames;
+	s_player_skin_box.itemnames = (const char **)s_pmi[currentdirectoryindex].skindisplaynames;
 
 	s_player_hand_title.generic.type = MTYPE_SEPARATOR;
 	s_player_hand_title.generic.name = "handedness";
diff --git a/libretro/libretro.c b/libretro/libretro.c
index 70f3293..021fd56 100644
--- a/libretro/libretro.c
+++ b/libretro/libretro.c
@@ -547,50 +547,50 @@ void glVertexAttribPointerMapped(int id, void* ptr)
 
 static bool initialize_gl()
 {
-	funcs[0].ptr  = qglTexImage2D         = hw_render.get_proc_address ("glTexImage2D");
-	funcs[1].ptr  = qglTexSubImage2D      = hw_render.get_proc_address ("glTexSubImage2D");
-	funcs[2].ptr  = qglTexParameteri      = hw_render.get_proc_address ("glTexParameteri");
-	funcs[3].ptr  = qglBindFramebuffer    = hw_render.get_proc_address ("glBindFramebuffer");
-	funcs[4].ptr  = qglGenerateMipmap     = hw_render.get_proc_address ("glGenerateMipmap");
-	funcs[5].ptr  = qglBlendFunc          = hw_render.get_proc_address ("glBlendFunc");
-	funcs[6].ptr  = qglTexSubImage2D      = hw_render.get_proc_address ("glTexSubImage2D");
-	funcs[7].ptr  = qglDepthMask          = hw_render.get_proc_address ("glDepthMask");
+	funcs[0].ptr  = qglTexImage2D         = (void (*)(GLenum,  GLint,  GLint,  GLsizei,  GLsizei,  GLint,  GLenum,  GLenum,  const GLvoid *))hw_render.get_proc_address ("glTexImage2D");
+	funcs[1].ptr  = qglTexSubImage2D      = (void (*)(GLenum,  GLint,  GLint,  GLint,  GLsizei,  GLsizei,  GLenum,  GLenum,  const GLvoid *))hw_render.get_proc_address ("glTexSubImage2D");
+	funcs[2].ptr  = qglTexParameteri      = (void (*)(GLenum,  GLenum,  GLint))hw_render.get_proc_address ("glTexParameteri");
+	funcs[3].ptr  = qglBindFramebuffer    = (void (*)(GLenum,  GLuint))hw_render.get_proc_address ("glBindFramebuffer");
+	funcs[4].ptr  = qglGenerateMipmap     = (void (*)(GLenum))hw_render.get_proc_address ("glGenerateMipmap");
+	funcs[5].ptr  = qglBlendFunc          = (void (*)(GLenum,  GLenum))hw_render.get_proc_address ("glBlendFunc");
+	funcs[6].ptr  = qglTexSubImage2D      = (void (*)(GLenum,  GLint,  GLint,  GLint,  GLsizei,  GLsizei,  GLenum,  GLenum,  const GLvoid *))hw_render.get_proc_address ("glTexSubImage2D");
+	funcs[7].ptr  = qglDepthMask          = (void (*)(GLboolean))hw_render.get_proc_address ("glDepthMask");
 	funcs[8].ptr  = qglPushMatrix         = hw_render.get_proc_address ("glPushMatrix");
-	funcs[9].ptr  = qglRotatef            = hw_render.get_proc_address ("glRotatef");
-	funcs[10].ptr = qglTranslatef         = hw_render.get_proc_address ("glTranslatef");
-	funcs[11].ptr = qglDepthRange         = hw_render.get_proc_address ("glDepthRange");
-	funcs[12].ptr = qglClear              = hw_render.get_proc_address ("glClear");
-	funcs[13].ptr = qglCullFace           = hw_render.get_proc_address ("glCullFace");
-	funcs[14].ptr = qglClearColor         = hw_render.get_proc_address ("glClearColor");
-	funcs[15].ptr = qglEnable             = hw_render.get_proc_address ("glEnable");
-	funcs[16].ptr = qglDisable            = hw_render.get_proc_address ("glDisable");
-	funcs[17].ptr = qglEnableClientState  = hw_render.get_proc_address ("glEnableClientState");
-	funcs[18].ptr = qglDisableClientState = hw_render.get_proc_address ("glDisableClientState");
+	funcs[9].ptr  = qglRotatef            = (void (*)(GLfloat,  GLfloat,  GLfloat,  GLfloat))hw_render.get_proc_address ("glRotatef");
+	funcs[10].ptr = qglTranslatef         = (void (*)(GLfloat,  GLfloat,  GLfloat))hw_render.get_proc_address ("glTranslatef");
+	funcs[11].ptr = qglDepthRange         = (void (*)(GLdouble,  GLdouble))hw_render.get_proc_address ("glDepthRange");
+	funcs[12].ptr = qglClear              = (void (*)(GLbitfield))hw_render.get_proc_address ("glClear");
+	funcs[13].ptr = qglCullFace           = (void (*)(GLenum))hw_render.get_proc_address ("glCullFace");
+	funcs[14].ptr = qglClearColor         = (void (*)(GLfloat,  GLfloat,  GLfloat,  GLfloat))hw_render.get_proc_address ("glClearColor");
+	funcs[15].ptr = qglEnable             = (void (*)(GLenum))hw_render.get_proc_address ("glEnable");
+	funcs[16].ptr = qglDisable            = (void (*)(GLenum))hw_render.get_proc_address ("glDisable");
+	funcs[17].ptr = qglEnableClientState  = (void (*)(GLenum))hw_render.get_proc_address ("glEnableClientState");
+	funcs[18].ptr = qglDisableClientState = (void (*)(GLenum))hw_render.get_proc_address ("glDisableClientState");
 	funcs[19].ptr = qglPopMatrix          = hw_render.get_proc_address ("glPopMatrix");
-	funcs[20].ptr = qglGetFloatv          = hw_render.get_proc_address ("glGetFloatv");
-	funcs[21].ptr = qglOrtho              = hw_render.get_proc_address ("glOrtho");
-	funcs[22].ptr = qglFrustum            = hw_render.get_proc_address ("glFrustum");
-	funcs[23].ptr = qglLoadMatrixf        = hw_render.get_proc_address ("glLoadMatrixf");
+	funcs[20].ptr = qglGetFloatv          = (void (*)(GLenum,  GLfloat *))hw_render.get_proc_address ("glGetFloatv");
+	funcs[21].ptr = qglOrtho              = (void (*)(GLdouble,  GLdouble,  GLdouble,  GLdouble,  GLdouble,  GLdouble))hw_render.get_proc_address ("glOrtho");
+	funcs[22].ptr = qglFrustum            = (void (*)(GLdouble,  GLdouble,  GLdouble,  GLdouble,  GLdouble,  GLdouble))hw_render.get_proc_address ("glFrustum");
+	funcs[23].ptr = qglLoadMatrixf        = (void (*)(const GLfloat *))hw_render.get_proc_address ("glLoadMatrixf");
 	funcs[24].ptr = qglLoadIdentity       = hw_render.get_proc_address ("glLoadIdentity");
-	funcs[25].ptr = qglMatrixMode         = hw_render.get_proc_address ("glMatrixMode");
-	funcs[26].ptr = qglBindTexture        = hw_render.get_proc_address ("glBindTexture");
-	funcs[27].ptr = qglReadPixels         = hw_render.get_proc_address ("glReadPixels");
-	funcs[28].ptr = qglPolygonMode        = hw_render.get_proc_address ("glPolygonMode");
-	funcs[29].ptr = qglVertexPointer      = hw_render.get_proc_address ("glVertexPointer");
-	funcs[30].ptr = qglTexCoordPointer    = hw_render.get_proc_address ("glTexCoordPointer");
-	funcs[31].ptr = qglColorPointer       = hw_render.get_proc_address ("glColorPointer");
-	funcs[32].ptr = qglDrawElements       = hw_render.get_proc_address ("glDrawElements");
-	funcs[33].ptr = qglViewport           = hw_render.get_proc_address ("glViewport");
-	funcs[34].ptr = qglDeleteTextures     = hw_render.get_proc_address ("glDeleteTextures");
-	funcs[35].ptr = qglClearStencil       = hw_render.get_proc_address ("glClearStencil");
-	funcs[36].ptr = qglColor4f            = hw_render.get_proc_address ("glColor4f");
-	funcs[37].ptr = qglScissor            = hw_render.get_proc_address ("glScissor");
-	funcs[38].ptr = qglStencilFunc        = hw_render.get_proc_address ("glStencilFunc");
-	funcs[39].ptr = qglStencilOp          = hw_render.get_proc_address ("glStencilOp");
-	funcs[40].ptr = qglScalef             = hw_render.get_proc_address ("glScalef");
-	funcs[41].ptr = qglDepthFunc          = hw_render.get_proc_address ("glDepthFunc");
-	funcs[42].ptr = qglTexEnvi            = hw_render.get_proc_address ("glTexEnvi");
-	funcs[43].ptr = qglAlphaFunc          = hw_render.get_proc_address ("glAlphaFunc");
+	funcs[25].ptr = qglMatrixMode         = (void (*)(GLenum))hw_render.get_proc_address ("glMatrixMode");
+	funcs[26].ptr = qglBindTexture        = (void (*)(GLenum,  GLuint))hw_render.get_proc_address ("glBindTexture");
+	funcs[27].ptr = qglReadPixels         = (void (*)(GLint,  GLint,  GLsizei,  GLsizei,  GLenum,  GLenum,  GLvoid *))hw_render.get_proc_address ("glReadPixels");
+	funcs[28].ptr = qglPolygonMode        = (void (*)(GLenum,  GLenum))hw_render.get_proc_address ("glPolygonMode");
+	funcs[29].ptr = qglVertexPointer      = (void (*)(GLint,  GLenum,  GLsizei,  const GLvoid *))hw_render.get_proc_address ("glVertexPointer");
+	funcs[30].ptr = qglTexCoordPointer    = (void (*)(GLint,  GLenum,  GLsizei,  const GLvoid *))hw_render.get_proc_address ("glTexCoordPointer");
+	funcs[31].ptr = qglColorPointer       = (void (*)(GLint,  GLenum,  GLsizei,  const GLvoid *))hw_render.get_proc_address ("glColorPointer");
+	funcs[32].ptr = qglDrawElements       = (void (*)(GLenum,  GLsizei,  GLenum,  const GLvoid *))hw_render.get_proc_address ("glDrawElements");
+	funcs[33].ptr = qglViewport           = (void (*)(GLint,  GLint,  GLsizei,  GLsizei))hw_render.get_proc_address ("glViewport");
+	funcs[34].ptr = qglDeleteTextures     = (void (*)(GLsizei,  const GLuint *))hw_render.get_proc_address ("glDeleteTextures");
+	funcs[35].ptr = qglClearStencil       = (void (*)(GLint))hw_render.get_proc_address ("glClearStencil");
+	funcs[36].ptr = qglColor4f            = (void (*)(GLfloat,  GLfloat,  GLfloat,  GLfloat))hw_render.get_proc_address ("glColor4f");
+	funcs[37].ptr = qglScissor            = (void (*)(GLint,  GLint,  GLsizei,  GLsizei))hw_render.get_proc_address ("glScissor");
+	funcs[38].ptr = qglStencilFunc        = (void (*)(GLenum,  GLint,  GLuint))hw_render.get_proc_address ("glStencilFunc");
+	funcs[39].ptr = qglStencilOp          = (void (*)(GLenum,  GLenum,  GLenum))hw_render.get_proc_address ("glStencilOp");
+	funcs[40].ptr = qglScalef             = (void (*)(GLfloat,  GLfloat,  GLfloat))hw_render.get_proc_address ("glScalef");
+	funcs[41].ptr = qglDepthFunc          = (void (*)(GLenum))hw_render.get_proc_address ("glDepthFunc");
+	funcs[42].ptr = qglTexEnvi            = (void (*)(GLenum,  GLenum,  GLint))hw_render.get_proc_address ("glTexEnvi");
+	funcs[43].ptr = qglAlphaFunc          = (void (*)(GLenum,  GLfloat))hw_render.get_proc_address ("glAlphaFunc");
 	
 	if (log_cb) {
 		int i;
@@ -2413,7 +2413,7 @@ qboolean SNDDMA_Init(void)
    dma.samples          = AUDIO_BUFFER_SIZE;
    dma.samplepos        = 0;
    dma.submission_chunk = 1;
-   dma.buffer           = audio_buffer;
+   dma.buffer           = (byte *)audio_buffer;
 
    sound_initialized    = 1;
 
diff --git a/ref_gl/gl_rsurf.c b/ref_gl/gl_rsurf.c
index 4696c68..203dec7 100644
--- a/ref_gl/gl_rsurf.c
+++ b/ref_gl/gl_rsurf.c
@@ -19,6 +19,7 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
 /* GL_RSURF.C: surface-related refresh code */
 #include <assert.h>
+#include <ctype.h>
 
 typedef struct
 {
