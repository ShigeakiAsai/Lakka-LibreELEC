diff --git a/yabause/src/scsp.c b/yabause/src/scsp.c
index 98dbb6b..fbff943 100644
--- a/yabause/src/scsp.c
+++ b/yabause/src/scsp.c
@@ -5694,14 +5694,14 @@ void ScspAsynMainRealtime(void * p) {
         }
         pthread_mutex_unlock(&sync_mutex);
 #elif defined(ARCH_IS_LINUX)    
-        time(&tm);    
+        time((time_t *)&tm);    
         long n = tm.tv_nsec;
         tm.tv_nsec += sleeptime;
         if( n > tm.tv_nsec){
           tm.tv_sec += 1;
         }
         pthread_mutex_lock(&sync_mutex);
-        int rtn = pthread_cond_timedwait(&sync_cnd,&sync_mutex,ctime(&tm));
+        int rtn = pthread_cond_timedwait(&sync_cnd,&sync_mutex,(const struct timespec * restrict)ctime((time_t *)&tm));
         if(rtn == 0){
           for (i = 0; i < samplecnt; i += step) {
             MM68KExec(step);
@@ -5749,10 +5749,10 @@ void ScspExec(){
   if (thread_running == 0){
     thread_running = 1;
     if (g_scsp_main_mode == 0) {
-      YabThreadStart(YAB_THREAD_SCSP, ScspAsynMainCpuTime, NULL);
+      YabThreadStart(YAB_THREAD_SCSP, (void * (*)(void *))ScspAsynMainCpuTime, NULL);
     }
     else {
-      YabThreadStart(YAB_THREAD_SCSP, ScspAsynMainRealtime, NULL);
+      YabThreadStart(YAB_THREAD_SCSP, (void * (*)(void *))ScspAsynMainRealtime, NULL);
     }
     YabThreadUSleep(100000);
   }
diff --git a/yabause/src/titan/titan.c b/yabause/src/titan/titan.c
index 75dd13e..c0a2ea1 100644
--- a/yabause/src/titan/titan.c
+++ b/yabause/src/titan/titan.c
@@ -402,11 +402,11 @@ int TitanInit()
          priority_thread_context.need_draw[i] = 0;
       }
 
-      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_0, VidsoftPriorityThread0, NULL);
-      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_1, VidsoftPriorityThread1, NULL);
-      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_2, VidsoftPriorityThread2, NULL);
-      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_3, VidsoftPriorityThread3, NULL);
-      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_4, VidsoftPriorityThread4, NULL);
+      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_0, (void * (*)(void *))VidsoftPriorityThread0, NULL);
+      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_1, (void * (*)(void *))VidsoftPriorityThread1, NULL);
+      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_2, (void * (*)(void *))VidsoftPriorityThread2, NULL);
+      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_3, (void * (*)(void *))VidsoftPriorityThread3, NULL);
+      YabThreadStart(YAB_THREAD_VIDSOFT_PRIORITY_4, (void * (*)(void *))VidsoftPriorityThread4, NULL);
 
       tt_context.inited = 1;
    }
diff --git a/yabause/src/vidogl.c b/yabause/src/vidogl.c
index 262da6d..b9bd2bb 100644
--- a/yabause/src/vidogl.c
+++ b/yabause/src/vidogl.c
@@ -59,6 +59,10 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 #define Y_MAX(a, b) ((a) > (b) ? (a) : (b))
 #define Y_MIN(a, b) ((a) < (b) ? (a) : (b))
 
+extern void RBGGenerator_init(int width, int height);
+extern void RBGGenerator_update(RBGDrawInfo * rbg );
+extern void YglRebuildGramebuffer();
+
 static Vdp2 baseVdp2Regs;
 Vdp2 * fixVdp2Regs = NULL;
 //#define PERFRAME_LOG
@@ -865,7 +869,7 @@ static void FASTCALL Vdp1ReadTexture(vdp1cmd_struct *cmd, YglSprite *sprite, Ygl
           if ((colorindex & 0x8000) && (fixVdp2Regs->SPCTL & 0x20)) {
             *texture->textdata++ = VDP1COLOR(0, colorcl, priority, 0, VDP1COLOR16TO24(colorindex));
           } else {
-            Vdp1MaskSpritePixel(fixVdp2Regs->SPCTL & 0xF, &colorindex,&colorcl);
+            Vdp1MaskSpritePixel(fixVdp2Regs->SPCTL & 0xF, (u16 *)&colorindex,&colorcl);
             *texture->textdata++ = VDP1COLOR(1, colorcl, priority, 0, colorindex);
           }
         }
@@ -909,7 +913,7 @@ static void FASTCALL Vdp1ReadTexture(vdp1cmd_struct *cmd, YglSprite *sprite, Ygl
              *texture->textdata++ = VDP1COLOR(0, colorcl, priority, 0, VDP1COLOR16TO24(dot));
           }
           else {
-            Vdp1MaskSpritePixel(fixVdp2Regs->SPCTL & 0xF, &dot, &colorcl);
+            Vdp1MaskSpritePixel(fixVdp2Regs->SPCTL & 0xF, (u16 *)&dot, &colorcl);
             *texture->textdata++ = VDP1COLOR(1, colorcl, priority, 0, dot );
           }
         }
@@ -3710,7 +3714,7 @@ static void FASTCALL Vdp2DrawRotation(RBGDrawInfo * rbg)
       Vdp2DrawRotationThread_running = 1;
       g_rotate_mtx = YabThreadCreateMutex();
       YabThreadLock(g_rotate_mtx);
-      YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_RBG0, Vdp2DrawRotationThread, NULL);
+      YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_RBG0, (void * (*)(void *))Vdp2DrawRotationThread, NULL);
     }
     Vdp2RgbTextureSync();
     YGL_THREAD_DEBUG("Vdp2DrawRotation in %d\n", curret_rbg->vdp2_sync_flg);
diff --git a/yabause/src/vidsoft.c b/yabause/src/vidsoft.c
index 7e76671..38c40e8 100644
--- a/yabause/src/vidsoft.c
+++ b/yabause/src/vidsoft.c
@@ -1309,7 +1309,7 @@ static void FASTCALL Vdp2DrawRotationFP(vdp2draw_struct *info, vdp2rotationparam
          if (info->linescreen > 1)
          {
             lineColorAddr = (T1ReadWord(ram, lineAddr) & 0x780) | p->linescreen;
-            lineColor = Vdp2ColorRamGetColor(lineColorAddr, color_ram);
+            lineColor = Vdp2ColorRamGetColor(lineColorAddr, (int)color_ram);
             lineAddr += lineInc;
             TitanPutLineHLine(info->linescreen, j, COLSAT2YAB32(0x3F, lineColor));
          }
@@ -1518,7 +1518,7 @@ static void Vdp2DrawLineScreen(void)
       for (i = 0; i < vdp2height; i++)
       {
          color = T1ReadWord(Vdp2Ram, scrAddr) & 0x7FF;
-         dot = Vdp2ColorRamGetColor(color, Vdp2ColorRam);
+         dot = Vdp2ColorRamGetColor(color, (int)Vdp2ColorRam);
          scrAddr += 2;
 
          TitanPutLineHLine(1, i, COLSAT2YAB32(alpha, dot));
@@ -1528,7 +1528,7 @@ static void Vdp2DrawLineScreen(void)
    {
       /* single color, implemented but not tested... */
       color = T1ReadWord(Vdp2Ram, scrAddr) & 0x7FF;
-      dot = Vdp2ColorRamGetColor(color, Vdp2ColorRam);
+      dot = Vdp2ColorRamGetColor(color, (int)Vdp2ColorRam);
       for (i = 0; i < vdp2height; i++)
          TitanPutLineHLine(1, i, COLSAT2YAB32(alpha, dot));
    }
@@ -2198,14 +2198,14 @@ int VIDSoftInit(void)
 
    vidsoft_vdp1_thread_context.need_draw = 0;
    vidsoft_vdp1_thread_context.draw_finished = 1;
-   YabThreadStart(YAB_THREAD_VIDSOFT_VDP1, VidsoftVdp1Thread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_VDP1, (void * (*)(void *))VidsoftVdp1Thread, 0);
 
-   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_RBG0, VidsoftRbg0Thread, 0);
-   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG0, VidsoftNbg0Thread, 0);
-   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG1, VidsoftNbg1Thread, 0);
-   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG2, VidsoftNbg2Thread, 0);
-   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG3, VidsoftNbg3Thread, 0);
-   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_SPRITE, VidsoftSpriteThread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_RBG0, (void * (*)(void *))VidsoftRbg0Thread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG0, (void * (*)(void *))VidsoftNbg0Thread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG1, (void * (*)(void *))VidsoftNbg1Thread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG2, (void * (*)(void *))VidsoftNbg2Thread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_NBG3, (void * (*)(void *))VidsoftNbg3Thread, 0);
+   YabThreadStart(YAB_THREAD_VIDSOFT_LAYER_SPRITE, (void * (*)(void *))VidsoftSpriteThread, 0);
 
    return 0;
 }
@@ -3717,7 +3717,7 @@ void VidsoftDrawSprite(Vdp2 * vdp2_regs, u8 * spr_window_mask, u8* vdp1_front_fr
                      continue;
                   }
 
-                  dot = Vdp2ColorRamGetColor(vdp1coloroffset + pixel,color_ram);
+                  dot = Vdp2ColorRamGetColor(vdp1coloroffset + pixel,(int)color_ram);
 
                   if (TestBothWindow(vdp2_regs->WCTLD >> 8, colorcalcwindow, i, i2) && (vdp2_regs->CCCTL & 0x40))
                   {
@@ -3806,7 +3806,7 @@ void VidsoftDrawSprite(Vdp2 * vdp2_regs, u8 * spr_window_mask, u8* vdp1_front_fr
                      continue;
                   }
 
-                  dot = Vdp2ColorRamGetColor(vdp1coloroffset + pixel, color_ram);
+                  dot = Vdp2ColorRamGetColor(vdp1coloroffset + pixel, (int)color_ram);
 
                   if (TestBothWindow(vdp2_regs->WCTLD >> 8, colorcalcwindow, i, i2) && (vdp2_regs->CCCTL & 0x40))
                   {
diff --git a/yabause/src/yabause.c b/yabause/src/yabause.c
index 981687d..31aeba0 100644
--- a/yabause/src/yabause.c
+++ b/yabause/src/yabause.c
@@ -67,7 +67,7 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 #include "vdp2.h"
 #include "yui.h"
 #include "bios.h"
-//#include "movie.h"
+#include "movie.h"
 #include "osdcore.h"
 #ifdef HAVE_LIBSDL
 #if defined(__APPLE__) || defined(GEKKO)
@@ -117,6 +117,8 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 
 #include <inttypes.h>
 
+extern void SH2HandleInterrupts(SH2_struct *context);
+
 //////////////////////////////////////////////////////////////////////////////
 
 yabsys_struct yabsys;
diff --git a/yabause/src/ygles.c b/yabause/src/ygles.c
index d2dec35..77a3633 100644
--- a/yabause/src/ygles.c
+++ b/yabause/src/ygles.c
@@ -34,6 +34,8 @@
 //#define YGLDEBUG yprintf
 //#define YGLLOG yprintf
 
+extern int YuiGetFB(void);
+extern void RBGGenerator_onFinish();
 extern u8 * Vdp1FrameBuffer[];
 static int rebuild_frame_buffer = 0;
 
@@ -859,7 +861,7 @@ void VIDOGLVdp1WriteFrameBuffer(u32 type, u32 addr, u32 val ) {
         }
         else {
           spritepixelinfo_struct spi = { 0 };
-          Vdp1GetSpritePixelInfo(Vdp2Regs->SPCTL & 0x0F, &val, &spi);
+          Vdp1GetSpritePixelInfo(Vdp2Regs->SPCTL & 0x0F, (u16 *)&val, &spi);
           _Ygl->CpuWriteFrameBuffer[texaddr] = VDP1COLOR(1, spi.colorcalc, spi.priority, 0, val);
         }
         break;
diff --git a/yabause/src/yglshaderes.c b/yabause/src/yglshaderes.c
index 68308fe..9796b26 100644
--- a/yabause/src/yglshaderes.c
+++ b/yabause/src/yglshaderes.c
@@ -27,6 +27,9 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 #include "vidshared.h"
 #include "shaders/FXAA_DefaultES.h"
 
+extern void YuiMsg(const char *format, ...);
+extern GLuint RBGGenerator_getTexture( int id );
+
 #if defined(__LIBRETRO__)
 #define YGLLOG YuiMsg
 #elif defined(__ANDROID__) || defined(_WINDOWS)
@@ -4084,7 +4087,7 @@ int YglBlitFXAA(u32 sourceTexture, float w, float h) {
       return -1;
     }
 
-    glShaderSource(fshader, 2, fxaa_f, NULL);
+    glShaderSource(fshader, 2, (const GLchar * const*)fxaa_f, NULL);
     glCompileShader(fshader);
     glGetShaderiv(fshader, GL_COMPILE_STATUS, &compiled);
     if (compiled == GL_FALSE) {
